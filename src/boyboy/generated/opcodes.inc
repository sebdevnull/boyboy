// ============================================================
// Opcode table for InstructionsTable (unprefixed)
// AUTO-GENERATED FILE â€” DO NOT EDIT MANUALLY
// Generated from Opcodes.json on 2025-09-08 17:36:58 UTC
// ============================================================

table[0x00] = {.mnemonic = "NOP",            .length = 1, .cycles = 4,  .execute = &Cpu::nop};
table[0x01] = {.mnemonic = "LD BC, n16",     .length = 3, .cycles = 12, .execute = &Cpu::ld_bc_n16};
table[0x02] = {.mnemonic = "LD [BC], A",     .length = 1, .cycles = 8,  .execute = &Cpu::ld_at_bc_a};
table[0x03] = {.mnemonic = "INC BC",         .length = 1, .cycles = 8,  .execute = &Cpu::inc_bc};
table[0x04] = {.mnemonic = "INC B",          .length = 1, .cycles = 4,  .execute = &Cpu::inc_b};
table[0x05] = {.mnemonic = "DEC B",          .length = 1, .cycles = 4,  .execute = &Cpu::dec_b};
table[0x06] = {.mnemonic = "LD B, n8",       .length = 2, .cycles = 8,  .execute = &Cpu::ld_b_n8};
table[0x07] = {.mnemonic = "RLCA",           .length = 1, .cycles = 4,  .execute = &Cpu::rlca};
table[0x08] = {.mnemonic = "LD [a16], SP",   .length = 3, .cycles = 20, .execute = &Cpu::ld_at_a16_sp};
table[0x09] = {.mnemonic = "ADD HL, BC",     .length = 1, .cycles = 8,  .execute = &Cpu::add_hl_bc};
table[0x0A] = {.mnemonic = "LD A, [BC]",     .length = 1, .cycles = 8,  .execute = &Cpu::ld_a_at_bc};
table[0x0B] = {.mnemonic = "DEC BC",         .length = 1, .cycles = 8,  .execute = &Cpu::dec_bc};
table[0x0C] = {.mnemonic = "INC C",          .length = 1, .cycles = 4,  .execute = &Cpu::inc_c};
table[0x0D] = {.mnemonic = "DEC C",          .length = 1, .cycles = 4,  .execute = &Cpu::dec_c};
table[0x0E] = {.mnemonic = "LD C, n8",       .length = 2, .cycles = 8,  .execute = &Cpu::ld_c_n8};
table[0x0F] = {.mnemonic = "RRCA",           .length = 1, .cycles = 4,  .execute = &Cpu::rrca};
table[0x10] = {.mnemonic = "STOP n8",        .length = 2, .cycles = 4,  .execute = &Cpu::stop_n8};
table[0x11] = {.mnemonic = "LD DE, n16",     .length = 3, .cycles = 12, .execute = &Cpu::ld_de_n16};
table[0x12] = {.mnemonic = "LD [DE], A",     .length = 1, .cycles = 8,  .execute = &Cpu::ld_at_de_a};
table[0x13] = {.mnemonic = "INC DE",         .length = 1, .cycles = 8,  .execute = &Cpu::inc_de};
table[0x14] = {.mnemonic = "INC D",          .length = 1, .cycles = 4,  .execute = &Cpu::inc_d};
table[0x15] = {.mnemonic = "DEC D",          .length = 1, .cycles = 4,  .execute = &Cpu::dec_d};
table[0x16] = {.mnemonic = "LD D, n8",       .length = 2, .cycles = 8,  .execute = &Cpu::ld_d_n8};
table[0x17] = {.mnemonic = "RLA",            .length = 1, .cycles = 4,  .execute = &Cpu::rla};
table[0x18] = {.mnemonic = "JR e8",          .length = 2, .cycles = 12, .execute = &Cpu::jr_e8};
table[0x19] = {.mnemonic = "ADD HL, DE",     .length = 1, .cycles = 8,  .execute = &Cpu::add_hl_de};
table[0x1A] = {.mnemonic = "LD A, [DE]",     .length = 1, .cycles = 8,  .execute = &Cpu::ld_a_at_de};
table[0x1B] = {.mnemonic = "DEC DE",         .length = 1, .cycles = 8,  .execute = &Cpu::dec_de};
table[0x1C] = {.mnemonic = "INC E",          .length = 1, .cycles = 4,  .execute = &Cpu::inc_e};
table[0x1D] = {.mnemonic = "DEC E",          .length = 1, .cycles = 4,  .execute = &Cpu::dec_e};
table[0x1E] = {.mnemonic = "LD E, n8",       .length = 2, .cycles = 8,  .execute = &Cpu::ld_e_n8};
table[0x1F] = {.mnemonic = "RRA",            .length = 1, .cycles = 4,  .execute = &Cpu::rra};
table[0x20] = {.mnemonic = "JR NZ, e8",      .length = 2, .cycles = 12, .execute = &Cpu::jr_nz_e8};
table[0x21] = {.mnemonic = "LD HL, n16",     .length = 3, .cycles = 12, .execute = &Cpu::ld_hl_n16};
table[0x22] = {.mnemonic = "LD [HL+], A",    .length = 1, .cycles = 8,  .execute = &Cpu::ld_at_hl_inc_a};
table[0x23] = {.mnemonic = "INC HL",         .length = 1, .cycles = 8,  .execute = &Cpu::inc_hl};
table[0x24] = {.mnemonic = "INC H",          .length = 1, .cycles = 4,  .execute = &Cpu::inc_h};
table[0x25] = {.mnemonic = "DEC H",          .length = 1, .cycles = 4,  .execute = &Cpu::dec_h};
table[0x26] = {.mnemonic = "LD H, n8",       .length = 2, .cycles = 8,  .execute = &Cpu::ld_h_n8};
table[0x27] = {.mnemonic = "DAA",            .length = 1, .cycles = 4,  .execute = &Cpu::daa};
table[0x28] = {.mnemonic = "JR Z, e8",       .length = 2, .cycles = 12, .execute = &Cpu::jr_z_e8};
table[0x29] = {.mnemonic = "ADD HL, HL",     .length = 1, .cycles = 8,  .execute = &Cpu::add_hl_hl};
table[0x2A] = {.mnemonic = "LD A, [HL+]",    .length = 1, .cycles = 8,  .execute = &Cpu::ld_a_at_hl_inc};
table[0x2B] = {.mnemonic = "DEC HL",         .length = 1, .cycles = 8,  .execute = &Cpu::dec_hl};
table[0x2C] = {.mnemonic = "INC L",          .length = 1, .cycles = 4,  .execute = &Cpu::inc_l};
table[0x2D] = {.mnemonic = "DEC L",          .length = 1, .cycles = 4,  .execute = &Cpu::dec_l};
table[0x2E] = {.mnemonic = "LD L, n8",       .length = 2, .cycles = 8,  .execute = &Cpu::ld_l_n8};
table[0x2F] = {.mnemonic = "CPL",            .length = 1, .cycles = 4,  .execute = &Cpu::cpl};
table[0x30] = {.mnemonic = "JR NC, e8",      .length = 2, .cycles = 12, .execute = &Cpu::jr_nc_e8};
table[0x31] = {.mnemonic = "LD SP, n16",     .length = 3, .cycles = 12, .execute = &Cpu::ld_sp_n16};
table[0x32] = {.mnemonic = "LD [HL-], A",    .length = 1, .cycles = 8,  .execute = &Cpu::ld_at_hl_dec_a};
table[0x33] = {.mnemonic = "INC SP",         .length = 1, .cycles = 8,  .execute = &Cpu::inc_sp};
table[0x34] = {.mnemonic = "INC [HL]",       .length = 1, .cycles = 12, .execute = &Cpu::inc_at_hl};
table[0x35] = {.mnemonic = "DEC [HL]",       .length = 1, .cycles = 12, .execute = &Cpu::dec_at_hl};
table[0x36] = {.mnemonic = "LD [HL], n8",    .length = 2, .cycles = 12, .execute = &Cpu::ld_at_hl_n8};
table[0x37] = {.mnemonic = "SCF",            .length = 1, .cycles = 4,  .execute = &Cpu::scf};
table[0x38] = {.mnemonic = "JR C, e8",       .length = 2, .cycles = 12, .execute = &Cpu::jr_c_e8};
table[0x39] = {.mnemonic = "ADD HL, SP",     .length = 1, .cycles = 8,  .execute = &Cpu::add_hl_sp};
table[0x3A] = {.mnemonic = "LD A, [HL-]",    .length = 1, .cycles = 8,  .execute = &Cpu::ld_a_at_hl_dec};
table[0x3B] = {.mnemonic = "DEC SP",         .length = 1, .cycles = 8,  .execute = &Cpu::dec_sp};
table[0x3C] = {.mnemonic = "INC A",          .length = 1, .cycles = 4,  .execute = &Cpu::inc_a};
table[0x3D] = {.mnemonic = "DEC A",          .length = 1, .cycles = 4,  .execute = &Cpu::dec_a};
table[0x3E] = {.mnemonic = "LD A, n8",       .length = 2, .cycles = 8,  .execute = &Cpu::ld_a_n8};
table[0x3F] = {.mnemonic = "CCF",            .length = 1, .cycles = 4,  .execute = &Cpu::ccf};
table[0x40] = {.mnemonic = "LD B, B",        .length = 1, .cycles = 4,  .execute = &Cpu::ld_b_b};
table[0x41] = {.mnemonic = "LD B, C",        .length = 1, .cycles = 4,  .execute = &Cpu::ld_b_c};
table[0x42] = {.mnemonic = "LD B, D",        .length = 1, .cycles = 4,  .execute = &Cpu::ld_b_d};
table[0x43] = {.mnemonic = "LD B, E",        .length = 1, .cycles = 4,  .execute = &Cpu::ld_b_e};
table[0x44] = {.mnemonic = "LD B, H",        .length = 1, .cycles = 4,  .execute = &Cpu::ld_b_h};
table[0x45] = {.mnemonic = "LD B, L",        .length = 1, .cycles = 4,  .execute = &Cpu::ld_b_l};
table[0x46] = {.mnemonic = "LD B, [HL]",     .length = 1, .cycles = 8,  .execute = &Cpu::ld_b_at_hl};
table[0x47] = {.mnemonic = "LD B, A",        .length = 1, .cycles = 4,  .execute = &Cpu::ld_b_a};
table[0x48] = {.mnemonic = "LD C, B",        .length = 1, .cycles = 4,  .execute = &Cpu::ld_c_b};
table[0x49] = {.mnemonic = "LD C, C",        .length = 1, .cycles = 4,  .execute = &Cpu::ld_c_c};
table[0x4A] = {.mnemonic = "LD C, D",        .length = 1, .cycles = 4,  .execute = &Cpu::ld_c_d};
table[0x4B] = {.mnemonic = "LD C, E",        .length = 1, .cycles = 4,  .execute = &Cpu::ld_c_e};
table[0x4C] = {.mnemonic = "LD C, H",        .length = 1, .cycles = 4,  .execute = &Cpu::ld_c_h};
table[0x4D] = {.mnemonic = "LD C, L",        .length = 1, .cycles = 4,  .execute = &Cpu::ld_c_l};
table[0x4E] = {.mnemonic = "LD C, [HL]",     .length = 1, .cycles = 8,  .execute = &Cpu::ld_c_at_hl};
table[0x4F] = {.mnemonic = "LD C, A",        .length = 1, .cycles = 4,  .execute = &Cpu::ld_c_a};
table[0x50] = {.mnemonic = "LD D, B",        .length = 1, .cycles = 4,  .execute = &Cpu::ld_d_b};
table[0x51] = {.mnemonic = "LD D, C",        .length = 1, .cycles = 4,  .execute = &Cpu::ld_d_c};
table[0x52] = {.mnemonic = "LD D, D",        .length = 1, .cycles = 4,  .execute = &Cpu::ld_d_d};
table[0x53] = {.mnemonic = "LD D, E",        .length = 1, .cycles = 4,  .execute = &Cpu::ld_d_e};
table[0x54] = {.mnemonic = "LD D, H",        .length = 1, .cycles = 4,  .execute = &Cpu::ld_d_h};
table[0x55] = {.mnemonic = "LD D, L",        .length = 1, .cycles = 4,  .execute = &Cpu::ld_d_l};
table[0x56] = {.mnemonic = "LD D, [HL]",     .length = 1, .cycles = 8,  .execute = &Cpu::ld_d_at_hl};
table[0x57] = {.mnemonic = "LD D, A",        .length = 1, .cycles = 4,  .execute = &Cpu::ld_d_a};
table[0x58] = {.mnemonic = "LD E, B",        .length = 1, .cycles = 4,  .execute = &Cpu::ld_e_b};
table[0x59] = {.mnemonic = "LD E, C",        .length = 1, .cycles = 4,  .execute = &Cpu::ld_e_c};
table[0x5A] = {.mnemonic = "LD E, D",        .length = 1, .cycles = 4,  .execute = &Cpu::ld_e_d};
table[0x5B] = {.mnemonic = "LD E, E",        .length = 1, .cycles = 4,  .execute = &Cpu::ld_e_e};
table[0x5C] = {.mnemonic = "LD E, H",        .length = 1, .cycles = 4,  .execute = &Cpu::ld_e_h};
table[0x5D] = {.mnemonic = "LD E, L",        .length = 1, .cycles = 4,  .execute = &Cpu::ld_e_l};
table[0x5E] = {.mnemonic = "LD E, [HL]",     .length = 1, .cycles = 8,  .execute = &Cpu::ld_e_at_hl};
table[0x5F] = {.mnemonic = "LD E, A",        .length = 1, .cycles = 4,  .execute = &Cpu::ld_e_a};
table[0x60] = {.mnemonic = "LD H, B",        .length = 1, .cycles = 4,  .execute = &Cpu::ld_h_b};
table[0x61] = {.mnemonic = "LD H, C",        .length = 1, .cycles = 4,  .execute = &Cpu::ld_h_c};
table[0x62] = {.mnemonic = "LD H, D",        .length = 1, .cycles = 4,  .execute = &Cpu::ld_h_d};
table[0x63] = {.mnemonic = "LD H, E",        .length = 1, .cycles = 4,  .execute = &Cpu::ld_h_e};
table[0x64] = {.mnemonic = "LD H, H",        .length = 1, .cycles = 4,  .execute = &Cpu::ld_h_h};
table[0x65] = {.mnemonic = "LD H, L",        .length = 1, .cycles = 4,  .execute = &Cpu::ld_h_l};
table[0x66] = {.mnemonic = "LD H, [HL]",     .length = 1, .cycles = 8,  .execute = &Cpu::ld_h_at_hl};
table[0x67] = {.mnemonic = "LD H, A",        .length = 1, .cycles = 4,  .execute = &Cpu::ld_h_a};
table[0x68] = {.mnemonic = "LD L, B",        .length = 1, .cycles = 4,  .execute = &Cpu::ld_l_b};
table[0x69] = {.mnemonic = "LD L, C",        .length = 1, .cycles = 4,  .execute = &Cpu::ld_l_c};
table[0x6A] = {.mnemonic = "LD L, D",        .length = 1, .cycles = 4,  .execute = &Cpu::ld_l_d};
table[0x6B] = {.mnemonic = "LD L, E",        .length = 1, .cycles = 4,  .execute = &Cpu::ld_l_e};
table[0x6C] = {.mnemonic = "LD L, H",        .length = 1, .cycles = 4,  .execute = &Cpu::ld_l_h};
table[0x6D] = {.mnemonic = "LD L, L",        .length = 1, .cycles = 4,  .execute = &Cpu::ld_l_l};
table[0x6E] = {.mnemonic = "LD L, [HL]",     .length = 1, .cycles = 8,  .execute = &Cpu::ld_l_at_hl};
table[0x6F] = {.mnemonic = "LD L, A",        .length = 1, .cycles = 4,  .execute = &Cpu::ld_l_a};
table[0x70] = {.mnemonic = "LD [HL], B",     .length = 1, .cycles = 8,  .execute = &Cpu::ld_at_hl_b};
table[0x71] = {.mnemonic = "LD [HL], C",     .length = 1, .cycles = 8,  .execute = &Cpu::ld_at_hl_c};
table[0x72] = {.mnemonic = "LD [HL], D",     .length = 1, .cycles = 8,  .execute = &Cpu::ld_at_hl_d};
table[0x73] = {.mnemonic = "LD [HL], E",     .length = 1, .cycles = 8,  .execute = &Cpu::ld_at_hl_e};
table[0x74] = {.mnemonic = "LD [HL], H",     .length = 1, .cycles = 8,  .execute = &Cpu::ld_at_hl_h};
table[0x75] = {.mnemonic = "LD [HL], L",     .length = 1, .cycles = 8,  .execute = &Cpu::ld_at_hl_l};
table[0x76] = {.mnemonic = "HALT",           .length = 1, .cycles = 4,  .execute = &Cpu::halt};
table[0x77] = {.mnemonic = "LD [HL], A",     .length = 1, .cycles = 8,  .execute = &Cpu::ld_at_hl_a};
table[0x78] = {.mnemonic = "LD A, B",        .length = 1, .cycles = 4,  .execute = &Cpu::ld_a_b};
table[0x79] = {.mnemonic = "LD A, C",        .length = 1, .cycles = 4,  .execute = &Cpu::ld_a_c};
table[0x7A] = {.mnemonic = "LD A, D",        .length = 1, .cycles = 4,  .execute = &Cpu::ld_a_d};
table[0x7B] = {.mnemonic = "LD A, E",        .length = 1, .cycles = 4,  .execute = &Cpu::ld_a_e};
table[0x7C] = {.mnemonic = "LD A, H",        .length = 1, .cycles = 4,  .execute = &Cpu::ld_a_h};
table[0x7D] = {.mnemonic = "LD A, L",        .length = 1, .cycles = 4,  .execute = &Cpu::ld_a_l};
table[0x7E] = {.mnemonic = "LD A, [HL]",     .length = 1, .cycles = 8,  .execute = &Cpu::ld_a_at_hl};
table[0x7F] = {.mnemonic = "LD A, A",        .length = 1, .cycles = 4,  .execute = &Cpu::ld_a_a};
table[0x80] = {.mnemonic = "ADD A, B",       .length = 1, .cycles = 4,  .execute = &Cpu::add_a_b};
table[0x81] = {.mnemonic = "ADD A, C",       .length = 1, .cycles = 4,  .execute = &Cpu::add_a_c};
table[0x82] = {.mnemonic = "ADD A, D",       .length = 1, .cycles = 4,  .execute = &Cpu::add_a_d};
table[0x83] = {.mnemonic = "ADD A, E",       .length = 1, .cycles = 4,  .execute = &Cpu::add_a_e};
table[0x84] = {.mnemonic = "ADD A, H",       .length = 1, .cycles = 4,  .execute = &Cpu::add_a_h};
table[0x85] = {.mnemonic = "ADD A, L",       .length = 1, .cycles = 4,  .execute = &Cpu::add_a_l};
table[0x86] = {.mnemonic = "ADD A, [HL]",    .length = 1, .cycles = 8,  .execute = &Cpu::add_a_at_hl};
table[0x87] = {.mnemonic = "ADD A, A",       .length = 1, .cycles = 4,  .execute = &Cpu::add_a_a};
table[0x88] = {.mnemonic = "ADC A, B",       .length = 1, .cycles = 4,  .execute = &Cpu::adc_a_b};
table[0x89] = {.mnemonic = "ADC A, C",       .length = 1, .cycles = 4,  .execute = &Cpu::adc_a_c};
table[0x8A] = {.mnemonic = "ADC A, D",       .length = 1, .cycles = 4,  .execute = &Cpu::adc_a_d};
table[0x8B] = {.mnemonic = "ADC A, E",       .length = 1, .cycles = 4,  .execute = &Cpu::adc_a_e};
table[0x8C] = {.mnemonic = "ADC A, H",       .length = 1, .cycles = 4,  .execute = &Cpu::adc_a_h};
table[0x8D] = {.mnemonic = "ADC A, L",       .length = 1, .cycles = 4,  .execute = &Cpu::adc_a_l};
table[0x8E] = {.mnemonic = "ADC A, [HL]",    .length = 1, .cycles = 8,  .execute = &Cpu::adc_a_at_hl};
table[0x8F] = {.mnemonic = "ADC A, A",       .length = 1, .cycles = 4,  .execute = &Cpu::adc_a_a};
table[0x90] = {.mnemonic = "SUB A, B",       .length = 1, .cycles = 4,  .execute = &Cpu::sub_a_b};
table[0x91] = {.mnemonic = "SUB A, C",       .length = 1, .cycles = 4,  .execute = &Cpu::sub_a_c};
table[0x92] = {.mnemonic = "SUB A, D",       .length = 1, .cycles = 4,  .execute = &Cpu::sub_a_d};
table[0x93] = {.mnemonic = "SUB A, E",       .length = 1, .cycles = 4,  .execute = &Cpu::sub_a_e};
table[0x94] = {.mnemonic = "SUB A, H",       .length = 1, .cycles = 4,  .execute = &Cpu::sub_a_h};
table[0x95] = {.mnemonic = "SUB A, L",       .length = 1, .cycles = 4,  .execute = &Cpu::sub_a_l};
table[0x96] = {.mnemonic = "SUB A, [HL]",    .length = 1, .cycles = 8,  .execute = &Cpu::sub_a_at_hl};
table[0x97] = {.mnemonic = "SUB A, A",       .length = 1, .cycles = 4,  .execute = &Cpu::sub_a_a};
table[0x98] = {.mnemonic = "SBC A, B",       .length = 1, .cycles = 4,  .execute = &Cpu::sbc_a_b};
table[0x99] = {.mnemonic = "SBC A, C",       .length = 1, .cycles = 4,  .execute = &Cpu::sbc_a_c};
table[0x9A] = {.mnemonic = "SBC A, D",       .length = 1, .cycles = 4,  .execute = &Cpu::sbc_a_d};
table[0x9B] = {.mnemonic = "SBC A, E",       .length = 1, .cycles = 4,  .execute = &Cpu::sbc_a_e};
table[0x9C] = {.mnemonic = "SBC A, H",       .length = 1, .cycles = 4,  .execute = &Cpu::sbc_a_h};
table[0x9D] = {.mnemonic = "SBC A, L",       .length = 1, .cycles = 4,  .execute = &Cpu::sbc_a_l};
table[0x9E] = {.mnemonic = "SBC A, [HL]",    .length = 1, .cycles = 8,  .execute = &Cpu::sbc_a_at_hl};
table[0x9F] = {.mnemonic = "SBC A, A",       .length = 1, .cycles = 4,  .execute = &Cpu::sbc_a_a};
table[0xA0] = {.mnemonic = "AND A, B",       .length = 1, .cycles = 4,  .execute = &Cpu::and_a_b};
table[0xA1] = {.mnemonic = "AND A, C",       .length = 1, .cycles = 4,  .execute = &Cpu::and_a_c};
table[0xA2] = {.mnemonic = "AND A, D",       .length = 1, .cycles = 4,  .execute = &Cpu::and_a_d};
table[0xA3] = {.mnemonic = "AND A, E",       .length = 1, .cycles = 4,  .execute = &Cpu::and_a_e};
table[0xA4] = {.mnemonic = "AND A, H",       .length = 1, .cycles = 4,  .execute = &Cpu::and_a_h};
table[0xA5] = {.mnemonic = "AND A, L",       .length = 1, .cycles = 4,  .execute = &Cpu::and_a_l};
table[0xA6] = {.mnemonic = "AND A, [HL]",    .length = 1, .cycles = 8,  .execute = &Cpu::and_a_at_hl};
table[0xA7] = {.mnemonic = "AND A, A",       .length = 1, .cycles = 4,  .execute = &Cpu::and_a_a};
table[0xA8] = {.mnemonic = "XOR A, B",       .length = 1, .cycles = 4,  .execute = &Cpu::xor_a_b};
table[0xA9] = {.mnemonic = "XOR A, C",       .length = 1, .cycles = 4,  .execute = &Cpu::xor_a_c};
table[0xAA] = {.mnemonic = "XOR A, D",       .length = 1, .cycles = 4,  .execute = &Cpu::xor_a_d};
table[0xAB] = {.mnemonic = "XOR A, E",       .length = 1, .cycles = 4,  .execute = &Cpu::xor_a_e};
table[0xAC] = {.mnemonic = "XOR A, H",       .length = 1, .cycles = 4,  .execute = &Cpu::xor_a_h};
table[0xAD] = {.mnemonic = "XOR A, L",       .length = 1, .cycles = 4,  .execute = &Cpu::xor_a_l};
table[0xAE] = {.mnemonic = "XOR A, [HL]",    .length = 1, .cycles = 8,  .execute = &Cpu::xor_a_at_hl};
table[0xAF] = {.mnemonic = "XOR A, A",       .length = 1, .cycles = 4,  .execute = &Cpu::xor_a_a};
table[0xB0] = {.mnemonic = "OR A, B",        .length = 1, .cycles = 4,  .execute = &Cpu::or_a_b};
table[0xB1] = {.mnemonic = "OR A, C",        .length = 1, .cycles = 4,  .execute = &Cpu::or_a_c};
table[0xB2] = {.mnemonic = "OR A, D",        .length = 1, .cycles = 4,  .execute = &Cpu::or_a_d};
table[0xB3] = {.mnemonic = "OR A, E",        .length = 1, .cycles = 4,  .execute = &Cpu::or_a_e};
table[0xB4] = {.mnemonic = "OR A, H",        .length = 1, .cycles = 4,  .execute = &Cpu::or_a_h};
table[0xB5] = {.mnemonic = "OR A, L",        .length = 1, .cycles = 4,  .execute = &Cpu::or_a_l};
table[0xB6] = {.mnemonic = "OR A, [HL]",     .length = 1, .cycles = 8,  .execute = &Cpu::or_a_at_hl};
table[0xB7] = {.mnemonic = "OR A, A",        .length = 1, .cycles = 4,  .execute = &Cpu::or_a_a};
table[0xB8] = {.mnemonic = "CP A, B",        .length = 1, .cycles = 4,  .execute = &Cpu::cp_a_b};
table[0xB9] = {.mnemonic = "CP A, C",        .length = 1, .cycles = 4,  .execute = &Cpu::cp_a_c};
table[0xBA] = {.mnemonic = "CP A, D",        .length = 1, .cycles = 4,  .execute = &Cpu::cp_a_d};
table[0xBB] = {.mnemonic = "CP A, E",        .length = 1, .cycles = 4,  .execute = &Cpu::cp_a_e};
table[0xBC] = {.mnemonic = "CP A, H",        .length = 1, .cycles = 4,  .execute = &Cpu::cp_a_h};
table[0xBD] = {.mnemonic = "CP A, L",        .length = 1, .cycles = 4,  .execute = &Cpu::cp_a_l};
table[0xBE] = {.mnemonic = "CP A, [HL]",     .length = 1, .cycles = 8,  .execute = &Cpu::cp_a_at_hl};
table[0xBF] = {.mnemonic = "CP A, A",        .length = 1, .cycles = 4,  .execute = &Cpu::cp_a_a};
table[0xC0] = {.mnemonic = "RET NZ",         .length = 1, .cycles = 20, .execute = &Cpu::ret_nz};
table[0xC1] = {.mnemonic = "POP BC",         .length = 1, .cycles = 12, .execute = &Cpu::pop_bc};
table[0xC2] = {.mnemonic = "JP NZ, a16",     .length = 3, .cycles = 16, .execute = &Cpu::jp_nz_a16};
table[0xC3] = {.mnemonic = "JP a16",         .length = 3, .cycles = 16, .execute = &Cpu::jp_a16};
table[0xC4] = {.mnemonic = "CALL NZ, a16",   .length = 3, .cycles = 24, .execute = &Cpu::call_nz_a16};
table[0xC5] = {.mnemonic = "PUSH BC",        .length = 1, .cycles = 16, .execute = &Cpu::push_bc};
table[0xC6] = {.mnemonic = "ADD A, n8",      .length = 2, .cycles = 8,  .execute = &Cpu::add_a_n8};
table[0xC7] = {.mnemonic = "RST $00",        .length = 1, .cycles = 16, .execute = &Cpu::rst_00};
table[0xC8] = {.mnemonic = "RET Z",          .length = 1, .cycles = 20, .execute = &Cpu::ret_z};
table[0xC9] = {.mnemonic = "RET",            .length = 1, .cycles = 16, .execute = &Cpu::ret};
table[0xCA] = {.mnemonic = "JP Z, a16",      .length = 3, .cycles = 16, .execute = &Cpu::jp_z_a16};
table[0xCB] = {.mnemonic = "PREFIX",         .length = 1, .cycles = 4,  .execute = &Cpu::prefix};
table[0xCC] = {.mnemonic = "CALL Z, a16",    .length = 3, .cycles = 24, .execute = &Cpu::call_z_a16};
table[0xCD] = {.mnemonic = "CALL a16",       .length = 3, .cycles = 24, .execute = &Cpu::call_a16};
table[0xCE] = {.mnemonic = "ADC A, n8",      .length = 2, .cycles = 8,  .execute = &Cpu::adc_a_n8};
table[0xCF] = {.mnemonic = "RST $08",        .length = 1, .cycles = 16, .execute = &Cpu::rst_08};
table[0xD0] = {.mnemonic = "RET NC",         .length = 1, .cycles = 20, .execute = &Cpu::ret_nc};
table[0xD1] = {.mnemonic = "POP DE",         .length = 1, .cycles = 12, .execute = &Cpu::pop_de};
table[0xD2] = {.mnemonic = "JP NC, a16",     .length = 3, .cycles = 16, .execute = &Cpu::jp_nc_a16};
table[0xD3] = {.mnemonic = "ILLEGAL_D3",     .length = 1, .cycles = 4,  .execute = &Cpu::illegal_d3};
table[0xD4] = {.mnemonic = "CALL NC, a16",   .length = 3, .cycles = 24, .execute = &Cpu::call_nc_a16};
table[0xD5] = {.mnemonic = "PUSH DE",        .length = 1, .cycles = 16, .execute = &Cpu::push_de};
table[0xD6] = {.mnemonic = "SUB A, n8",      .length = 2, .cycles = 8,  .execute = &Cpu::sub_a_n8};
table[0xD7] = {.mnemonic = "RST $10",        .length = 1, .cycles = 16, .execute = &Cpu::rst_10};
table[0xD8] = {.mnemonic = "RET C",          .length = 1, .cycles = 20, .execute = &Cpu::ret_c};
table[0xD9] = {.mnemonic = "RETI",           .length = 1, .cycles = 16, .execute = &Cpu::reti};
table[0xDA] = {.mnemonic = "JP C, a16",      .length = 3, .cycles = 16, .execute = &Cpu::jp_c_a16};
table[0xDB] = {.mnemonic = "ILLEGAL_DB",     .length = 1, .cycles = 4,  .execute = &Cpu::illegal_db};
table[0xDC] = {.mnemonic = "CALL C, a16",    .length = 3, .cycles = 24, .execute = &Cpu::call_c_a16};
table[0xDD] = {.mnemonic = "ILLEGAL_DD",     .length = 1, .cycles = 4,  .execute = &Cpu::illegal_dd};
table[0xDE] = {.mnemonic = "SBC A, n8",      .length = 2, .cycles = 8,  .execute = &Cpu::sbc_a_n8};
table[0xDF] = {.mnemonic = "RST $18",        .length = 1, .cycles = 16, .execute = &Cpu::rst_18};
table[0xE0] = {.mnemonic = "LDH [a8], A",    .length = 2, .cycles = 12, .execute = &Cpu::ldh_at_a8_a};
table[0xE1] = {.mnemonic = "POP HL",         .length = 1, .cycles = 12, .execute = &Cpu::pop_hl};
table[0xE2] = {.mnemonic = "LDH [C], A",     .length = 1, .cycles = 8,  .execute = &Cpu::ldh_at_c_a};
table[0xE3] = {.mnemonic = "ILLEGAL_E3",     .length = 1, .cycles = 4,  .execute = &Cpu::illegal_e3};
table[0xE4] = {.mnemonic = "ILLEGAL_E4",     .length = 1, .cycles = 4,  .execute = &Cpu::illegal_e4};
table[0xE5] = {.mnemonic = "PUSH HL",        .length = 1, .cycles = 16, .execute = &Cpu::push_hl};
table[0xE6] = {.mnemonic = "AND A, n8",      .length = 2, .cycles = 8,  .execute = &Cpu::and_a_n8};
table[0xE7] = {.mnemonic = "RST $20",        .length = 1, .cycles = 16, .execute = &Cpu::rst_20};
table[0xE8] = {.mnemonic = "ADD SP, e8",     .length = 2, .cycles = 16, .execute = &Cpu::add_sp_e8};
table[0xE9] = {.mnemonic = "JP HL",          .length = 1, .cycles = 4,  .execute = &Cpu::jp_hl};
table[0xEA] = {.mnemonic = "LD [a16], A",    .length = 3, .cycles = 16, .execute = &Cpu::ld_at_a16_a};
table[0xEB] = {.mnemonic = "ILLEGAL_EB",     .length = 1, .cycles = 4,  .execute = &Cpu::illegal_eb};
table[0xEC] = {.mnemonic = "ILLEGAL_EC",     .length = 1, .cycles = 4,  .execute = &Cpu::illegal_ec};
table[0xED] = {.mnemonic = "ILLEGAL_ED",     .length = 1, .cycles = 4,  .execute = &Cpu::illegal_ed};
table[0xEE] = {.mnemonic = "XOR A, n8",      .length = 2, .cycles = 8,  .execute = &Cpu::xor_a_n8};
table[0xEF] = {.mnemonic = "RST $28",        .length = 1, .cycles = 16, .execute = &Cpu::rst_28};
table[0xF0] = {.mnemonic = "LDH A, [a8]",    .length = 2, .cycles = 12, .execute = &Cpu::ldh_a_at_a8};
table[0xF1] = {.mnemonic = "POP AF",         .length = 1, .cycles = 12, .execute = &Cpu::pop_af};
table[0xF2] = {.mnemonic = "LDH A, [C]",     .length = 1, .cycles = 8,  .execute = &Cpu::ldh_a_at_c};
table[0xF3] = {.mnemonic = "DI",             .length = 1, .cycles = 4,  .execute = &Cpu::di};
table[0xF4] = {.mnemonic = "ILLEGAL_F4",     .length = 1, .cycles = 4,  .execute = &Cpu::illegal_f4};
table[0xF5] = {.mnemonic = "PUSH AF",        .length = 1, .cycles = 16, .execute = &Cpu::push_af};
table[0xF6] = {.mnemonic = "OR A, n8",       .length = 2, .cycles = 8,  .execute = &Cpu::or_a_n8};
table[0xF7] = {.mnemonic = "RST $30",        .length = 1, .cycles = 16, .execute = &Cpu::rst_30};
table[0xF8] = {.mnemonic = "LD HL, SP+, e8", .length = 2, .cycles = 12, .execute = &Cpu::ld_hl_sp_inc_e8};
table[0xF9] = {.mnemonic = "LD SP, HL",      .length = 1, .cycles = 8,  .execute = &Cpu::ld_sp_hl};
table[0xFA] = {.mnemonic = "LD A, [a16]",    .length = 3, .cycles = 16, .execute = &Cpu::ld_a_at_a16};
table[0xFB] = {.mnemonic = "EI",             .length = 1, .cycles = 4,  .execute = &Cpu::ei};
table[0xFC] = {.mnemonic = "ILLEGAL_FC",     .length = 1, .cycles = 4,  .execute = &Cpu::illegal_fc};
table[0xFD] = {.mnemonic = "ILLEGAL_FD",     .length = 1, .cycles = 4,  .execute = &Cpu::illegal_fd};
table[0xFE] = {.mnemonic = "CP A, n8",       .length = 2, .cycles = 8,  .execute = &Cpu::cp_a_n8};
table[0xFF] = {.mnemonic = "RST $38",        .length = 1, .cycles = 16, .execute = &Cpu::rst_38};
