/**
 * @file opcodes.h
 * @brief Opcodes definitions
 *
 * @license GPLv3 (see LICENSE file)
 */

#pragma once

#include <cstdint>

namespace boyboy::cpu {

// NOLINTBEGIN(readability-identifier-naming)
// clang-format off
enum class Opcode : uint8_t {
    NOP             = 0x00, // NOP
    LD_BC_N16       = 0x01, // LD BC, n16
    LD_AT_BC_A      = 0x02, // LD [BC], A
    INC_BC          = 0x03, // INC BC
    INC_B           = 0x04, // INC B
    DEC_B           = 0x05, // DEC B
    LD_B_N8         = 0x06, // LD B, n8
    RLCA            = 0x07, // RLCA
    LD_AT_A16_SP    = 0x08, // LD [a16], SP
    ADD_HL_BC       = 0x09, // ADD HL, BC
    LD_A_AT_BC      = 0x0A, // LD A, [BC]
    DEC_BC          = 0x0B, // DEC BC
    INC_C           = 0x0C, // INC C
    DEC_C           = 0x0D, // DEC C
    LD_C_N8         = 0x0E, // LD C, n8
    RRCA            = 0x0F, // RRCA
    STOP_N8         = 0x10, // STOP n8
    LD_DE_N16       = 0x11, // LD DE, n16
    LD_AT_DE_A      = 0x12, // LD [DE], A
    INC_DE          = 0x13, // INC DE
    INC_D           = 0x14, // INC D
    DEC_D           = 0x15, // DEC D
    LD_D_N8         = 0x16, // LD D, n8
    RLA             = 0x17, // RLA
    JR_E8           = 0x18, // JR e8
    ADD_HL_DE       = 0x19, // ADD HL, DE
    LD_A_AT_DE      = 0x1A, // LD A, [DE]
    DEC_DE          = 0x1B, // DEC DE
    INC_E           = 0x1C, // INC E
    DEC_E           = 0x1D, // DEC E
    LD_E_N8         = 0x1E, // LD E, n8
    RRA             = 0x1F, // RRA
    JR_NZ_E8        = 0x20, // JR NZ, e8
    LD_HL_N16       = 0x21, // LD HL, n16
    LD_AT_HL_INC_A  = 0x22, // LD [HL+], A
    INC_HL          = 0x23, // INC HL
    INC_H           = 0x24, // INC H
    DEC_H           = 0x25, // DEC H
    LD_H_N8         = 0x26, // LD H, n8
    DAA             = 0x27, // DAA
    JR_Z_E8         = 0x28, // JR Z, e8
    ADD_HL_HL       = 0x29, // ADD HL, HL
    LD_A_AT_HL_INC  = 0x2A, // LD A, [HL+]
    DEC_HL          = 0x2B, // DEC HL
    INC_L           = 0x2C, // INC L
    DEC_L           = 0x2D, // DEC L
    LD_L_N8         = 0x2E, // LD L, n8
    CPL             = 0x2F, // CPL
    JR_NC_E8        = 0x30, // JR NC, e8
    LD_SP_N16       = 0x31, // LD SP, n16
    LD_AT_HL_DEC_A  = 0x32, // LD [HL-], A
    INC_SP          = 0x33, // INC SP
    INC_AT_HL       = 0x34, // INC [HL]
    DEC_AT_HL       = 0x35, // DEC [HL]
    LD_AT_HL_N8     = 0x36, // LD [HL], n8
    SCF             = 0x37, // SCF
    JR_C_E8         = 0x38, // JR C, e8
    ADD_HL_SP       = 0x39, // ADD HL, SP
    LD_A_AT_HL_DEC  = 0x3A, // LD A, [HL-]
    DEC_SP          = 0x3B, // DEC SP
    INC_A           = 0x3C, // INC A
    DEC_A           = 0x3D, // DEC A
    LD_A_N8         = 0x3E, // LD A, n8
    CCF             = 0x3F, // CCF
    LD_B_B          = 0x40, // LD B, B
    LD_B_C          = 0x41, // LD B, C
    LD_B_D          = 0x42, // LD B, D
    LD_B_E          = 0x43, // LD B, E
    LD_B_H          = 0x44, // LD B, H
    LD_B_L          = 0x45, // LD B, L
    LD_B_AT_HL      = 0x46, // LD B, [HL]
    LD_B_A          = 0x47, // LD B, A
    LD_C_B          = 0x48, // LD C, B
    LD_C_C          = 0x49, // LD C, C
    LD_C_D          = 0x4A, // LD C, D
    LD_C_E          = 0x4B, // LD C, E
    LD_C_H          = 0x4C, // LD C, H
    LD_C_L          = 0x4D, // LD C, L
    LD_C_AT_HL      = 0x4E, // LD C, [HL]
    LD_C_A          = 0x4F, // LD C, A
    LD_D_B          = 0x50, // LD D, B
    LD_D_C          = 0x51, // LD D, C
    LD_D_D          = 0x52, // LD D, D
    LD_D_E          = 0x53, // LD D, E
    LD_D_H          = 0x54, // LD D, H
    LD_D_L          = 0x55, // LD D, L
    LD_D_AT_HL      = 0x56, // LD D, [HL]
    LD_D_A          = 0x57, // LD D, A
    LD_E_B          = 0x58, // LD E, B
    LD_E_C          = 0x59, // LD E, C
    LD_E_D          = 0x5A, // LD E, D
    LD_E_E          = 0x5B, // LD E, E
    LD_E_H          = 0x5C, // LD E, H
    LD_E_L          = 0x5D, // LD E, L
    LD_E_AT_HL      = 0x5E, // LD E, [HL]
    LD_E_A          = 0x5F, // LD E, A
    LD_H_B          = 0x60, // LD H, B
    LD_H_C          = 0x61, // LD H, C
    LD_H_D          = 0x62, // LD H, D
    LD_H_E          = 0x63, // LD H, E
    LD_H_H          = 0x64, // LD H, H
    LD_H_L          = 0x65, // LD H, L
    LD_H_AT_HL      = 0x66, // LD H, [HL]
    LD_H_A          = 0x67, // LD H, A
    LD_L_B          = 0x68, // LD L, B
    LD_L_C          = 0x69, // LD L, C
    LD_L_D          = 0x6A, // LD L, D
    LD_L_E          = 0x6B, // LD L, E
    LD_L_H          = 0x6C, // LD L, H
    LD_L_L          = 0x6D, // LD L, L
    LD_L_AT_HL      = 0x6E, // LD L, [HL]
    LD_L_A          = 0x6F, // LD L, A
    LD_AT_HL_B      = 0x70, // LD [HL], B
    LD_AT_HL_C      = 0x71, // LD [HL], C
    LD_AT_HL_D      = 0x72, // LD [HL], D
    LD_AT_HL_E      = 0x73, // LD [HL], E
    LD_AT_HL_H      = 0x74, // LD [HL], H
    LD_AT_HL_L      = 0x75, // LD [HL], L
    HALT            = 0x76, // HALT
    LD_AT_HL_A      = 0x77, // LD [HL], A
    LD_A_B          = 0x78, // LD A, B
    LD_A_C          = 0x79, // LD A, C
    LD_A_D          = 0x7A, // LD A, D
    LD_A_E          = 0x7B, // LD A, E
    LD_A_H          = 0x7C, // LD A, H
    LD_A_L          = 0x7D, // LD A, L
    LD_A_AT_HL      = 0x7E, // LD A, [HL]
    LD_A_A          = 0x7F, // LD A, A
    ADD_A_B         = 0x80, // ADD A, B
    ADD_A_C         = 0x81, // ADD A, C
    ADD_A_D         = 0x82, // ADD A, D
    ADD_A_E         = 0x83, // ADD A, E
    ADD_A_H         = 0x84, // ADD A, H
    ADD_A_L         = 0x85, // ADD A, L
    ADD_A_AT_HL     = 0x86, // ADD A, [HL]
    ADD_A_A         = 0x87, // ADD A, A
    ADC_A_B         = 0x88, // ADC A, B
    ADC_A_C         = 0x89, // ADC A, C
    ADC_A_D         = 0x8A, // ADC A, D
    ADC_A_E         = 0x8B, // ADC A, E
    ADC_A_H         = 0x8C, // ADC A, H
    ADC_A_L         = 0x8D, // ADC A, L
    ADC_A_AT_HL     = 0x8E, // ADC A, [HL]
    ADC_A_A         = 0x8F, // ADC A, A
    SUB_A_B         = 0x90, // SUB A, B
    SUB_A_C         = 0x91, // SUB A, C
    SUB_A_D         = 0x92, // SUB A, D
    SUB_A_E         = 0x93, // SUB A, E
    SUB_A_H         = 0x94, // SUB A, H
    SUB_A_L         = 0x95, // SUB A, L
    SUB_A_AT_HL     = 0x96, // SUB A, [HL]
    SUB_A_A         = 0x97, // SUB A, A
    SBC_A_B         = 0x98, // SBC A, B
    SBC_A_C         = 0x99, // SBC A, C
    SBC_A_D         = 0x9A, // SBC A, D
    SBC_A_E         = 0x9B, // SBC A, E
    SBC_A_H         = 0x9C, // SBC A, H
    SBC_A_L         = 0x9D, // SBC A, L
    SBC_A_AT_HL     = 0x9E, // SBC A, [HL]
    SBC_A_A         = 0x9F, // SBC A, A
    AND_A_B         = 0xA0, // AND A, B
    AND_A_C         = 0xA1, // AND A, C
    AND_A_D         = 0xA2, // AND A, D
    AND_A_E         = 0xA3, // AND A, E
    AND_A_H         = 0xA4, // AND A, H
    AND_A_L         = 0xA5, // AND A, L
    AND_A_AT_HL     = 0xA6, // AND A, [HL]
    AND_A_A         = 0xA7, // AND A, A
    XOR_A_B         = 0xA8, // XOR A, B
    XOR_A_C         = 0xA9, // XOR A, C
    XOR_A_D         = 0xAA, // XOR A, D
    XOR_A_E         = 0xAB, // XOR A, E
    XOR_A_H         = 0xAC, // XOR A, H
    XOR_A_L         = 0xAD, // XOR A, L
    XOR_A_AT_HL     = 0xAE, // XOR A, [HL]
    XOR_A_A         = 0xAF, // XOR A, A
    OR_A_B          = 0xB0, // OR A, B
    OR_A_C          = 0xB1, // OR A, C
    OR_A_D          = 0xB2, // OR A, D
    OR_A_E          = 0xB3, // OR A, E
    OR_A_H          = 0xB4, // OR A, H
    OR_A_L          = 0xB5, // OR A, L
    OR_A_AT_HL      = 0xB6, // OR A, [HL]
    OR_A_A          = 0xB7, // OR A, A
    CP_A_B          = 0xB8, // CP A, B
    CP_A_C          = 0xB9, // CP A, C
    CP_A_D          = 0xBA, // CP A, D
    CP_A_E          = 0xBB, // CP A, E
    CP_A_H          = 0xBC, // CP A, H
    CP_A_L          = 0xBD, // CP A, L
    CP_A_AT_HL      = 0xBE, // CP A, [HL]
    CP_A_A          = 0xBF, // CP A, A
    RET_NZ          = 0xC0, // RET NZ
    POP_BC          = 0xC1, // POP BC
    JP_NZ_A16       = 0xC2, // JP NZ, a16
    JP_A16          = 0xC3, // JP a16
    CALL_NZ_A16     = 0xC4, // CALL NZ, a16
    PUSH_BC         = 0xC5, // PUSH BC
    ADD_A_N8        = 0xC6, // ADD A, n8
    RST_00          = 0xC7, // RST $00
    RET_Z           = 0xC8, // RET Z
    RET             = 0xC9, // RET
    JP_Z_A16        = 0xCA, // JP Z, a16
    PREFIX          = 0xCB, // PREFIX
    CALL_Z_A16      = 0xCC, // CALL Z, a16
    CALL_A16        = 0xCD, // CALL a16
    ADC_A_N8        = 0xCE, // ADC A, n8
    RST_08          = 0xCF, // RST $08
    RET_NC          = 0xD0, // RET NC
    POP_DE          = 0xD1, // POP DE
    JP_NC_A16       = 0xD2, // JP NC, a16
    ILLEGAL_D3      = 0xD3, // ILLEGAL_D3
    CALL_NC_A16     = 0xD4, // CALL NC, a16
    PUSH_DE         = 0xD5, // PUSH DE
    SUB_A_N8        = 0xD6, // SUB A, n8
    RST_10          = 0xD7, // RST $10
    RET_C           = 0xD8, // RET C
    RETI            = 0xD9, // RETI
    JP_C_A16        = 0xDA, // JP C, a16
    ILLEGAL_DB      = 0xDB, // ILLEGAL_DB
    CALL_C_A16      = 0xDC, // CALL C, a16
    ILLEGAL_DD      = 0xDD, // ILLEGAL_DD
    SBC_A_N8        = 0xDE, // SBC A, n8
    RST_18          = 0xDF, // RST $18
    LDH_AT_A8_A     = 0xE0, // LDH [a8], A
    POP_HL          = 0xE1, // POP HL
    LDH_AT_C_A      = 0xE2, // LDH [C], A
    ILLEGAL_E3      = 0xE3, // ILLEGAL_E3
    ILLEGAL_E4      = 0xE4, // ILLEGAL_E4
    PUSH_HL         = 0xE5, // PUSH HL
    AND_A_N8        = 0xE6, // AND A, n8
    RST_20          = 0xE7, // RST $20
    ADD_SP_E8       = 0xE8, // ADD SP, e8
    JP_HL           = 0xE9, // JP HL
    LD_AT_A16_A     = 0xEA, // LD [a16], A
    ILLEGAL_EB      = 0xEB, // ILLEGAL_EB
    ILLEGAL_EC      = 0xEC, // ILLEGAL_EC
    ILLEGAL_ED      = 0xED, // ILLEGAL_ED
    XOR_A_N8        = 0xEE, // XOR A, n8
    RST_28          = 0xEF, // RST $28
    LDH_A_AT_A8     = 0xF0, // LDH A, [a8]
    POP_AF          = 0xF1, // POP AF
    LDH_A_AT_C      = 0xF2, // LDH A, [C]
    DI              = 0xF3, // DI
    ILLEGAL_F4      = 0xF4, // ILLEGAL_F4
    PUSH_AF         = 0xF5, // PUSH AF
    OR_A_N8         = 0xF6, // OR A, n8
    RST_30          = 0xF7, // RST $30
    LD_HL_SP_INC_E8 = 0xF8, // LD HL, SP+, e8
    LD_SP_HL        = 0xF9, // LD SP, HL
    LD_A_AT_A16     = 0xFA, // LD A, [a16]
    EI              = 0xFB, // EI
    ILLEGAL_FC      = 0xFC, // ILLEGAL_FC
    ILLEGAL_FD      = 0xFD, // ILLEGAL_FD
    CP_A_N8         = 0xFE, // CP A, n8
    RST_38          = 0xFF, // RST $38
};

enum class CBOpcode : uint8_t {
    RLC_B       = 0x00, // RLC B
    RLC_C       = 0x01, // RLC C
    RLC_D       = 0x02, // RLC D
    RLC_E       = 0x03, // RLC E
    RLC_H       = 0x04, // RLC H
    RLC_L       = 0x05, // RLC L
    RLC_AT_HL   = 0x06, // RLC [HL]
    RLC_A       = 0x07, // RLC A
    RRC_B       = 0x08, // RRC B
    RRC_C       = 0x09, // RRC C
    RRC_D       = 0x0A, // RRC D
    RRC_E       = 0x0B, // RRC E
    RRC_H       = 0x0C, // RRC H
    RRC_L       = 0x0D, // RRC L
    RRC_AT_HL   = 0x0E, // RRC [HL]
    RRC_A       = 0x0F, // RRC A
    RL_B        = 0x10, // RL B
    RL_C        = 0x11, // RL C
    RL_D        = 0x12, // RL D
    RL_E        = 0x13, // RL E
    RL_H        = 0x14, // RL H
    RL_L        = 0x15, // RL L
    RL_AT_HL    = 0x16, // RL [HL]
    RL_A        = 0x17, // RL A
    RR_B        = 0x18, // RR B
    RR_C        = 0x19, // RR C
    RR_D        = 0x1A, // RR D
    RR_E        = 0x1B, // RR E
    RR_H        = 0x1C, // RR H
    RR_L        = 0x1D, // RR L
    RR_AT_HL    = 0x1E, // RR [HL]
    RR_A        = 0x1F, // RR A
    SLA_B       = 0x20, // SLA B
    SLA_C       = 0x21, // SLA C
    SLA_D       = 0x22, // SLA D
    SLA_E       = 0x23, // SLA E
    SLA_H       = 0x24, // SLA H
    SLA_L       = 0x25, // SLA L
    SLA_AT_HL   = 0x26, // SLA [HL]
    SLA_A       = 0x27, // SLA A
    SRA_B       = 0x28, // SRA B
    SRA_C       = 0x29, // SRA C
    SRA_D       = 0x2A, // SRA D
    SRA_E       = 0x2B, // SRA E
    SRA_H       = 0x2C, // SRA H
    SRA_L       = 0x2D, // SRA L
    SRA_AT_HL   = 0x2E, // SRA [HL]
    SRA_A       = 0x2F, // SRA A
    SWAP_B      = 0x30, // SWAP B
    SWAP_C      = 0x31, // SWAP C
    SWAP_D      = 0x32, // SWAP D
    SWAP_E      = 0x33, // SWAP E
    SWAP_H      = 0x34, // SWAP H
    SWAP_L      = 0x35, // SWAP L
    SWAP_AT_HL  = 0x36, // SWAP [HL]
    SWAP_A      = 0x37, // SWAP A
    SRL_B       = 0x38, // SRL B
    SRL_C       = 0x39, // SRL C
    SRL_D       = 0x3A, // SRL D
    SRL_E       = 0x3B, // SRL E
    SRL_H       = 0x3C, // SRL H
    SRL_L       = 0x3D, // SRL L
    SRL_AT_HL   = 0x3E, // SRL [HL]
    SRL_A       = 0x3F, // SRL A
    BIT_0_B     = 0x40, // BIT 0, B
    BIT_0_C     = 0x41, // BIT 0, C
    BIT_0_D     = 0x42, // BIT 0, D
    BIT_0_E     = 0x43, // BIT 0, E
    BIT_0_H     = 0x44, // BIT 0, H
    BIT_0_L     = 0x45, // BIT 0, L
    BIT_0_AT_HL = 0x46, // BIT 0, [HL]
    BIT_0_A     = 0x47, // BIT 0, A
    BIT_1_B     = 0x48, // BIT 1, B
    BIT_1_C     = 0x49, // BIT 1, C
    BIT_1_D     = 0x4A, // BIT 1, D
    BIT_1_E     = 0x4B, // BIT 1, E
    BIT_1_H     = 0x4C, // BIT 1, H
    BIT_1_L     = 0x4D, // BIT 1, L
    BIT_1_AT_HL = 0x4E, // BIT 1, [HL]
    BIT_1_A     = 0x4F, // BIT 1, A
    BIT_2_B     = 0x50, // BIT 2, B
    BIT_2_C     = 0x51, // BIT 2, C
    BIT_2_D     = 0x52, // BIT 2, D
    BIT_2_E     = 0x53, // BIT 2, E
    BIT_2_H     = 0x54, // BIT 2, H
    BIT_2_L     = 0x55, // BIT 2, L
    BIT_2_AT_HL = 0x56, // BIT 2, [HL]
    BIT_2_A     = 0x57, // BIT 2, A
    BIT_3_B     = 0x58, // BIT 3, B
    BIT_3_C     = 0x59, // BIT 3, C
    BIT_3_D     = 0x5A, // BIT 3, D
    BIT_3_E     = 0x5B, // BIT 3, E
    BIT_3_H     = 0x5C, // BIT 3, H
    BIT_3_L     = 0x5D, // BIT 3, L
    BIT_3_AT_HL = 0x5E, // BIT 3, [HL]
    BIT_3_A     = 0x5F, // BIT 3, A
    BIT_4_B     = 0x60, // BIT 4, B
    BIT_4_C     = 0x61, // BIT 4, C
    BIT_4_D     = 0x62, // BIT 4, D
    BIT_4_E     = 0x63, // BIT 4, E
    BIT_4_H     = 0x64, // BIT 4, H
    BIT_4_L     = 0x65, // BIT 4, L
    BIT_4_AT_HL = 0x66, // BIT 4, [HL]
    BIT_4_A     = 0x67, // BIT 4, A
    BIT_5_B     = 0x68, // BIT 5, B
    BIT_5_C     = 0x69, // BIT 5, C
    BIT_5_D     = 0x6A, // BIT 5, D
    BIT_5_E     = 0x6B, // BIT 5, E
    BIT_5_H     = 0x6C, // BIT 5, H
    BIT_5_L     = 0x6D, // BIT 5, L
    BIT_5_AT_HL = 0x6E, // BIT 5, [HL]
    BIT_5_A     = 0x6F, // BIT 5, A
    BIT_6_B     = 0x70, // BIT 6, B
    BIT_6_C     = 0x71, // BIT 6, C
    BIT_6_D     = 0x72, // BIT 6, D
    BIT_6_E     = 0x73, // BIT 6, E
    BIT_6_H     = 0x74, // BIT 6, H
    BIT_6_L     = 0x75, // BIT 6, L
    BIT_6_AT_HL = 0x76, // BIT 6, [HL]
    BIT_6_A     = 0x77, // BIT 6, A
    BIT_7_B     = 0x78, // BIT 7, B
    BIT_7_C     = 0x79, // BIT 7, C
    BIT_7_D     = 0x7A, // BIT 7, D
    BIT_7_E     = 0x7B, // BIT 7, E
    BIT_7_H     = 0x7C, // BIT 7, H
    BIT_7_L     = 0x7D, // BIT 7, L
    BIT_7_AT_HL = 0x7E, // BIT 7, [HL]
    BIT_7_A     = 0x7F, // BIT 7, A
    RES_0_B     = 0x80, // RES 0, B
    RES_0_C     = 0x81, // RES 0, C
    RES_0_D     = 0x82, // RES 0, D
    RES_0_E     = 0x83, // RES 0, E
    RES_0_H     = 0x84, // RES 0, H
    RES_0_L     = 0x85, // RES 0, L
    RES_0_AT_HL = 0x86, // RES 0, [HL]
    RES_0_A     = 0x87, // RES 0, A
    RES_1_B     = 0x88, // RES 1, B
    RES_1_C     = 0x89, // RES 1, C
    RES_1_D     = 0x8A, // RES 1, D
    RES_1_E     = 0x8B, // RES 1, E
    RES_1_H     = 0x8C, // RES 1, H
    RES_1_L     = 0x8D, // RES 1, L
    RES_1_AT_HL = 0x8E, // RES 1, [HL]
    RES_1_A     = 0x8F, // RES 1, A
    RES_2_B     = 0x90, // RES 2, B
    RES_2_C     = 0x91, // RES 2, C
    RES_2_D     = 0x92, // RES 2, D
    RES_2_E     = 0x93, // RES 2, E
    RES_2_H     = 0x94, // RES 2, H
    RES_2_L     = 0x95, // RES 2, L
    RES_2_AT_HL = 0x96, // RES 2, [HL]
    RES_2_A     = 0x97, // RES 2, A
    RES_3_B     = 0x98, // RES 3, B
    RES_3_C     = 0x99, // RES 3, C
    RES_3_D     = 0x9A, // RES 3, D
    RES_3_E     = 0x9B, // RES 3, E
    RES_3_H     = 0x9C, // RES 3, H
    RES_3_L     = 0x9D, // RES 3, L
    RES_3_AT_HL = 0x9E, // RES 3, [HL]
    RES_3_A     = 0x9F, // RES 3, A
    RES_4_B     = 0xA0, // RES 4, B
    RES_4_C     = 0xA1, // RES 4, C
    RES_4_D     = 0xA2, // RES 4, D
    RES_4_E     = 0xA3, // RES 4, E
    RES_4_H     = 0xA4, // RES 4, H
    RES_4_L     = 0xA5, // RES 4, L
    RES_4_AT_HL = 0xA6, // RES 4, [HL]
    RES_4_A     = 0xA7, // RES 4, A
    RES_5_B     = 0xA8, // RES 5, B
    RES_5_C     = 0xA9, // RES 5, C
    RES_5_D     = 0xAA, // RES 5, D
    RES_5_E     = 0xAB, // RES 5, E
    RES_5_H     = 0xAC, // RES 5, H
    RES_5_L     = 0xAD, // RES 5, L
    RES_5_AT_HL = 0xAE, // RES 5, [HL]
    RES_5_A     = 0xAF, // RES 5, A
    RES_6_B     = 0xB0, // RES 6, B
    RES_6_C     = 0xB1, // RES 6, C
    RES_6_D     = 0xB2, // RES 6, D
    RES_6_E     = 0xB3, // RES 6, E
    RES_6_H     = 0xB4, // RES 6, H
    RES_6_L     = 0xB5, // RES 6, L
    RES_6_AT_HL = 0xB6, // RES 6, [HL]
    RES_6_A     = 0xB7, // RES 6, A
    RES_7_B     = 0xB8, // RES 7, B
    RES_7_C     = 0xB9, // RES 7, C
    RES_7_D     = 0xBA, // RES 7, D
    RES_7_E     = 0xBB, // RES 7, E
    RES_7_H     = 0xBC, // RES 7, H
    RES_7_L     = 0xBD, // RES 7, L
    RES_7_AT_HL = 0xBE, // RES 7, [HL]
    RES_7_A     = 0xBF, // RES 7, A
    SET_0_B     = 0xC0, // SET 0, B
    SET_0_C     = 0xC1, // SET 0, C
    SET_0_D     = 0xC2, // SET 0, D
    SET_0_E     = 0xC3, // SET 0, E
    SET_0_H     = 0xC4, // SET 0, H
    SET_0_L     = 0xC5, // SET 0, L
    SET_0_AT_HL = 0xC6, // SET 0, [HL]
    SET_0_A     = 0xC7, // SET 0, A
    SET_1_B     = 0xC8, // SET 1, B
    SET_1_C     = 0xC9, // SET 1, C
    SET_1_D     = 0xCA, // SET 1, D
    SET_1_E     = 0xCB, // SET 1, E
    SET_1_H     = 0xCC, // SET 1, H
    SET_1_L     = 0xCD, // SET 1, L
    SET_1_AT_HL = 0xCE, // SET 1, [HL]
    SET_1_A     = 0xCF, // SET 1, A
    SET_2_B     = 0xD0, // SET 2, B
    SET_2_C     = 0xD1, // SET 2, C
    SET_2_D     = 0xD2, // SET 2, D
    SET_2_E     = 0xD3, // SET 2, E
    SET_2_H     = 0xD4, // SET 2, H
    SET_2_L     = 0xD5, // SET 2, L
    SET_2_AT_HL = 0xD6, // SET 2, [HL]
    SET_2_A     = 0xD7, // SET 2, A
    SET_3_B     = 0xD8, // SET 3, B
    SET_3_C     = 0xD9, // SET 3, C
    SET_3_D     = 0xDA, // SET 3, D
    SET_3_E     = 0xDB, // SET 3, E
    SET_3_H     = 0xDC, // SET 3, H
    SET_3_L     = 0xDD, // SET 3, L
    SET_3_AT_HL = 0xDE, // SET 3, [HL]
    SET_3_A     = 0xDF, // SET 3, A
    SET_4_B     = 0xE0, // SET 4, B
    SET_4_C     = 0xE1, // SET 4, C
    SET_4_D     = 0xE2, // SET 4, D
    SET_4_E     = 0xE3, // SET 4, E
    SET_4_H     = 0xE4, // SET 4, H
    SET_4_L     = 0xE5, // SET 4, L
    SET_4_AT_HL = 0xE6, // SET 4, [HL]
    SET_4_A     = 0xE7, // SET 4, A
    SET_5_B     = 0xE8, // SET 5, B
    SET_5_C     = 0xE9, // SET 5, C
    SET_5_D     = 0xEA, // SET 5, D
    SET_5_E     = 0xEB, // SET 5, E
    SET_5_H     = 0xEC, // SET 5, H
    SET_5_L     = 0xED, // SET 5, L
    SET_5_AT_HL = 0xEE, // SET 5, [HL]
    SET_5_A     = 0xEF, // SET 5, A
    SET_6_B     = 0xF0, // SET 6, B
    SET_6_C     = 0xF1, // SET 6, C
    SET_6_D     = 0xF2, // SET 6, D
    SET_6_E     = 0xF3, // SET 6, E
    SET_6_H     = 0xF4, // SET 6, H
    SET_6_L     = 0xF5, // SET 6, L
    SET_6_AT_HL = 0xF6, // SET 6, [HL]
    SET_6_A     = 0xF7, // SET 6, A
    SET_7_B     = 0xF8, // SET 7, B
    SET_7_C     = 0xF9, // SET 7, C
    SET_7_D     = 0xFA, // SET 7, D
    SET_7_E     = 0xFB, // SET 7, E
    SET_7_H     = 0xFC, // SET 7, H
    SET_7_L     = 0xFD, // SET 7, L
    SET_7_AT_HL = 0xFE, // SET 7, [HL]
    SET_7_A     = 0xFF, // SET 7, A
};
// clang-format on
// NOLINTEND(readability-identifier-naming)

} // namespace boyboy::cpu
