/**
 * @file cpu.h
 * @brief CPU emulation for the BoyBoy emulator.
 *
 * @license GPLv3 (see LICENSE file)
 */

#pragma once

#include <cstdint>
#include <string_view>

#include "cpu_constants.h"
#include "instructions.h"
#include "mmu.h"
#include "registers.h"

namespace boyboy::cpu {

class Cpu {
public:
    Cpu()
    {
        registers_.af = 0;
        registers_.bc = 0;
        registers_.de = 0;
        registers_.hl = 0;
        registers_.sp = SPStartValue;
        registers_.pc = PCStartValue;
    }

    // Register accessors
    [[nodiscard]] uint8_t get_register(Register8Name reg) const;
    [[nodiscard]] uint16_t get_register(Register16Name reg) const;
    void set_register(Register8Name reg, uint8_t value);
    void set_register(Register16Name reg, uint16_t value);

    // Flag accessors
    [[nodiscard]] bool get_flag(uint8_t flag) const;
    void set_flag(uint8_t flag, bool value);

    // Execution functions
    void tick();
    uint8_t fetch();
    void execute(uint8_t opcode, InstructionType instr_type = InstructionType::Unprefixed);

    // Helpers mainly for debugging and testing
    [[nodiscard]] std::string_view disassemble(uint16_t addr) const;
    [[nodiscard]] uint64_t get_cycles() const { return cycles_; }

private:
    mmu::Mmu mmu_{};
    Registers registers_{};
    uint64_t cycles_{};

    // Memory access
    [[nodiscard]] uint8_t read_byte(uint16_t addr) const;
    [[nodiscard]] uint16_t read_word(uint16_t addr) const;
    void write_byte(uint16_t addr, uint8_t value);
    void write_word(uint16_t addr, uint16_t value);

    // Helper functions
    void reset_flags() { registers_.f(0); }

    // ALU operations
    void add(uint8_t val, bool carry);
    void sub(uint8_t val, bool carry);
    void aand(uint8_t val);
    void xxor(uint8_t val);
    void oor(uint8_t val);
    void cp(uint8_t val);

    // ========== CPU Instructions definitions ==========
    // Generic unprefixed CPU instructions
    void ld_r16_n16(Register16Name r16);
    void ld_at_r16_a(Register16Name r16);
    void ld_a_at_r16(Register16Name r16);

    void inc_r16(Register16Name r16);
    void dec_r16(Register16Name r16);
    void add_hl_r16(Register16Name r16);

    void inc_r8(Register8Name r8);
    void dec_r8(Register8Name r8);

    void ld_r8_n8(Register8Name r8);
    void ld_r8_r8(Register8Name dest, Register8Name src);

    void add_a_r8(Register8Name r8);
    void adc_a_r8(Register8Name r8);
    void sub_a_r8(Register8Name r8);
    void sbc_a_r8(Register8Name r8);
    void and_a_r8(Register8Name r8);
    void xor_a_r8(Register8Name r8);
    void or_a_r8(Register8Name r8);
    void cp_a_r8(Register8Name r8);

    void pop_r16(Register16Name r16);
    void push_r16(Register16Name r16);

    // Generic CB-prefixed CPU instructions
    void rlc_r8(Register8Name r8);
    void rrc_r8(Register8Name r8);
    void rl_r8(Register8Name r8);
    void rr_r8(Register8Name r8);
    void sla_r8(Register8Name r8);
    void sra_r8(Register8Name r8);
    void swap_r8(Register8Name r8);
    void srl_r8(Register8Name r8);
    void bit_b3_r8(uint8_t bit, Register8Name r8);
    void res_b3_r8(uint8_t bit, Register8Name r8);
    void set_b3_r8(uint8_t bit, Register8Name r8);


    // Autogenerated CPU instructions definitions from Opcodes.json
    // clang-format off
#include "generated/cpu_opcodes.inc"
#include "generated/cpu_cbopcodes.inc"
    // clang-format on

    friend class InstructionTable;
};

// Stub disabling macros for implemented opcodes
#define CPU_NOP

} // namespace boyboy::cpu